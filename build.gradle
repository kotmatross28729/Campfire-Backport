buildscript {
    repositories {
        mavenCentral()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.11'
    }
}

repositories {
    maven { // this has to be here and not in buildscript.repositories, otherwise Gradle won't find mixin <0.8 for some reason
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    flatDir {
        dirs 'libs'
    }
}

configurations {
    runtimeClasspath // I don't know what this does.
    embed
    compile.extendsFrom(embed)
}


apply plugin: 'forge'

version = "1.7.10-1.11"
group= "connor135246" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "campfirebackport"

// add argument "-Pnomixin" to build nomixin version (no embedded mixin 0.7)
def nomixin = project.hasProperty("nomixin")

// thanks
// https://github.com/makamys/MC-Modding-notes/tree/master/examples/Forge-Mixin-1_7_10

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
        replace '${version}', project.version
    runDir = "eclipse"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    embed 'org.spongepowered:mixin:0.7+'
    compileOnly  name: 'NotEnoughItems-2.3.80-GTNH-dev'
    compileOnly  name: 'CraftTweaker-3.2.13-dev'
    compileOnly  name: 'Botania-1.9.24-GTNH-dev'
    compileOnly  name: 'CodeChickenLib-1.1.8-dev'
    compileOnly  name: 'Thaumcraft-1.7.10-4.2.3.5a'
    compileOnly  name: 'Waila-1.6.0-dev'
    compileOnly  name: 'AdvancedRocketry-1.7.10-1.4.0-32'
    compileOnly  name: 'Galacticraft-1.7-3.0.12.504'
    compileOnly  name: 'witchery-1.7.10-0.24.1'
    compileOnly  name: 'gregtech_1.7.10-6.17.01-dev'
    compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: 'libs', include: '*.zip')

    if (nomixin) {
        compile 'org.spongepowered:mixin:0.7+'
    }
    else {
        embed 'org.spongepowered:mixin:0.7+'
    }
	compile fileTree(dir: 'lib2', include: '*.jar')

        // Compile-time dependencies in the "lib2" folder include Advanced Rocketry, Botania, CodeChickenLib, CraftTweaker, Galacticraft Core, Gregtech 6, NEI, Thaumcraft, Waila, and Witchery.

	// you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    /* Mixin 0.8 breaks with 1.7.10, but can be made to work by embedding these. However,
	   doing so overrides the libraries provided by Forge, which will likely result in other mods breaking. */ 
    //embed 'org.ow2.asm:asm-all:5.2'
    //embed 'com.google.guava:guava:21.0'
}

def outRefMapFile = tasks.compileJava.temporaryDir.toString() + "/campfirebackport.mixin.refmap.json" // 1.7.10 mixin compatibility

jar {
    manifest {
        attributes (
            'MixinConfigs': 'campfirebackport.mixin.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'FMLCorePlugin': 'connor135246.campfirebackport.CampfireBackportMixins',
            'TweakOrder': 0,
            'FMLAT': 'campfirebackport_at.cfg',

            // If these two are not set, Forge will not detect the mod, it will only run the mixins
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true'
        )
    }

    from(sourceSets.main.output);

    from outRefMapFile; // 1.7.10 mixin compatibility

    // embed libraries in jar
    from configurations.embed.collect {
        exclude '**/LICENSE.txt'
        it.isDirectory() ? it : zipTree(it)
    }
    
    if (nomixin) {
        version += "+nomixin"
    }
}

// 1.7.10 mixin compatibility
def outSrgFile = tasks.compileJava.temporaryDir.toString() + "/outSrg.srg"

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapFile}"];
}

reobf {
    addExtraSrgFile outSrgFile
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "nomixin", nomixin
    if (nomixin) {
        project.version += "+nomixin"
    }
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}